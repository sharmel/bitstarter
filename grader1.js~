#!/usr/bin/env node
/*
Automatically grade files for the presence of specified HTML tags/attributes.
Uses commander.js and cheerio. Teaches command line application development
and basic DOM parsing.

References:

 + cheerio
   - https://github.com/MatthewMueller/cheerio
   - http://encosia.com/cheerio-faster-windows-friendly-alternative-jsdom/
   - http://maxogden.com/scraping-with-node.html

 + commander.js
   - https://github.com/visionmedia/commander.js
   - http://tjholowaychuk.com/post/9103188408/commander-js-nodejs-command-line-interfaces-made-easy

 + JSON
   - http://en.wikipedia.org/wiki/JSON
   - https://developer.mozilla.org/en-US/docs/JSON
   - https://developer.mozilla.org/en-US/docs/JSON#JSON_in_Firefox_2
*/

//define required libraries and set default for the files
var rest = require('restler');
var fs = require('fs');
var program = require('commander');
var cheerio = require('cheerio');
var HTMLFILE_DEFAULT = "index.html";
var CHECKSFILE_DEFAULT = "checks.json";
//var URL_DEFAULT = "http://immense-inlet-2460.herokuapp.com/"

 


//checks if there is file and convert if to string then returns it 
var assertFileExists = function(infile) {
    var instr = infile.toString();
    if(!fs.existsSync(instr)) {
        console.log("%s does not exist. Exiting.", instr);
        process.exit(1); // http://nodejs.org/api/process.html#process_process_exit_code
    }
    return instr;
};


var assertUrlExists = function(infile) {
    var instr = infile.toString();
    if(!fs.existsSync(instr)) {
        console.log("%s does not exist. Exiting.", instr);
        process.exit(1); // http://nodejs.org/api/process.html#process_process_exit_code
    }
    return instr;
};



//returns content of the html file(classes)

var cheerioHtmlFile = function(htmlfile) {
    return cheerio.load(fs.readFileSync(htmlfile));
};


var cheerioUrl = function(url) {
    rest.get(url).on('complete', function(result) {
    if (result instanceof Error) {
    sys.puts('Error: ' + result.message);
process.exit(1);
    } else {
return cheerio.load(result);
  }
});
};





//returns content of the json file
var loadChecks = function(checksfile) {
    return JSON.parse(fs.readFileSync(checksfile));
};


//checks that there is json tags and html tags in checksfile and htmlfile

var checkHtmlFile = function(htmlfile, checksfile) {
    $ = cheerioHtmlFile(htmlfile);
    var checks = loadChecks(checksfile).sort();
    var out = {};
    for(var ii in checks) {
        var present = $(checks[ii]).length > 0;
        out[checks[ii]] = present;
    }
    return out;
};






var checkUrl = function(url, checksfile) {
    $ = cheerioUrl(url);
    var checks = loadChecks(checksfile).sort();
    var out = {};
    for(var ii in checks) {
        var present = $(checks[ii]).length > 0;
        out[checks[ii]] = present;
    }
    return out;
};






//clone the commander function
var clone = function(fn) {
    // Workaround for commander.js issue.
    // http://stackoverflow.com/a/6772648
    return fn.bind({});
};


//allows us to pass file and url from the command line, this is using commander.js
if(require.main == module) {

    program
        .option('-c, --checks <check_file>', 'Path to checks.json', clone(assertFileExists))
        .option('-f, --file ', 'Path to index.html', clone(assertFileExists))  
        .option('-u, --url <http://>', 'URL', clone(assertUrlExists))
        .parse(process.argv);

    if (program.file) {
console.log ("checkHtmlFile");
var checkJson = checkHtmlFile(program.file, program.checks);
    }
    if (program.url) {
console.log ("checkUrl");
var checkJson = checkUrl(program.url, program.checks);
    }

    var outJson = JSON.stringify(checkJson, null, 4);
    console.log(outJson);
}


